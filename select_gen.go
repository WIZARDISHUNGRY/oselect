// Code generated by a tool. DO NOT EDIT.

package oselect

func Select2[T0, T1 any](p0 Param[T0], p1 Param[T1]) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	}
}
func Select2Default[T0, T1 any](p0 Param[T0], p1 Param[T1], df func()) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	default:
		df()
	}
}
func Recv2[T0, T1 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1)) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	}
}
func Recv2Default[T0, T1 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), df func()) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	default:
		df()
	}
}
func RecvOK2[T0, T1 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool)) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	}
}
func RecvOK2Default[T0, T1 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), df func()) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	default:
		df()
	}
}
func Send2[T0, T1 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	}
}
func Send2Default[T0, T1 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, df func()) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	default:
		df()
	}
}
func Select3[T0, T1, T2 any](p0 Param[T0], p1 Param[T1], p2 Param[T2]) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	}
}
func Select3Default[T0, T1, T2 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], df func()) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	default:
		df()
	}
}
func Recv3[T0, T1, T2 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2)) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	}
}
func Recv3Default[T0, T1, T2 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), df func()) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	default:
		df()
	}
}
func RecvOK3[T0, T1, T2 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool)) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	}
}
func RecvOK3Default[T0, T1, T2 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), df func()) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	default:
		df()
	}
}
func Send3[T0, T1, T2 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	}
}
func Send3Default[T0, T1, T2 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, df func()) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	default:
		df()
	}
}
func Select4[T0, T1, T2, T3 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3]) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	}
}
func Select4Default[T0, T1, T2, T3 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], df func()) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	default:
		df()
	}
}
func Recv4[T0, T1, T2, T3 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3)) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	}
}
func Recv4Default[T0, T1, T2, T3 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), df func()) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	default:
		df()
	}
}
func RecvOK4[T0, T1, T2, T3 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool)) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	}
}
func RecvOK4Default[T0, T1, T2, T3 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), df func()) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	default:
		df()
	}
}
func Send4[T0, T1, T2, T3 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	}
}
func Send4Default[T0, T1, T2, T3 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, df func()) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	default:
		df()
	}
}
func Select5[T0, T1, T2, T3, T4 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4]) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	}
}
func Select5Default[T0, T1, T2, T3, T4 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4], df func()) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	default:
		df()
	}
}
func Recv5[T0, T1, T2, T3, T4 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4)) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	}
}
func Recv5Default[T0, T1, T2, T3, T4 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4), df func()) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	default:
		df()
	}
}
func RecvOK5[T0, T1, T2, T3, T4 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool)) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	}
}
func RecvOK5Default[T0, T1, T2, T3, T4 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool), df func()) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	default:
		df()
	}
}
func Send5[T0, T1, T2, T3, T4 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	}
}
func Send5Default[T0, T1, T2, T3, T4 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4, df func()) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	default:
		df()
	}
}
func Select6[T0, T1, T2, T3, T4, T5 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4], p5 Param[T5]) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	case p5.
		SendChan <- p5.
		SendValue:
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
	}
}
func Select6Default[T0, T1, T2, T3, T4, T5 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4], p5 Param[T5], df func()) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	case p5.
		SendChan <- p5.
		SendValue:
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
	default:
		df()
	}
}
func Recv6[T0, T1, T2, T3, T4, T5 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4), c5 <-chan T5, f5 func(T5)) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	case v5 := <-c5:
		f5(v5)
	}
}
func Recv6Default[T0, T1, T2, T3, T4, T5 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4), c5 <-chan T5, f5 func(T5), df func()) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	case v5 := <-c5:
		f5(v5)
	default:
		df()
	}
}
func RecvOK6[T0, T1, T2, T3, T4, T5 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool), c5 <-chan T5, f5 func(T5, bool)) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	case v5, ok := <-c5:
		f5(v5, ok)
	}
}
func RecvOK6Default[T0, T1, T2, T3, T4, T5 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool), c5 <-chan T5, f5 func(T5, bool), df func()) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	case v5, ok := <-c5:
		f5(v5, ok)
	default:
		df()
	}
}
func Send6[T0, T1, T2, T3, T4, T5 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4, c5 chan<- T5, v5 T5) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	case c5 <- v5:
	}
}
func Send6Default[T0, T1, T2, T3, T4, T5 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4, c5 chan<- T5, v5 T5, df func()) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	case c5 <- v5:
	default:
		df()
	}
}
func Select7[T0, T1, T2, T3, T4, T5, T6 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4], p5 Param[T5], p6 Param[T6]) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	case p5.
		SendChan <- p5.
		SendValue:
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
	case p6.
		SendChan <- p6.
		SendValue:
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
	}
}
func Select7Default[T0, T1, T2, T3, T4, T5, T6 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4], p5 Param[T5], p6 Param[T6], df func()) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	case p5.
		SendChan <- p5.
		SendValue:
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
	case p6.
		SendChan <- p6.
		SendValue:
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
	default:
		df()
	}
}
func Recv7[T0, T1, T2, T3, T4, T5, T6 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4), c5 <-chan T5, f5 func(T5), c6 <-chan T6, f6 func(T6)) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	case v5 := <-c5:
		f5(v5)
	case v6 := <-c6:
		f6(v6)
	}
}
func Recv7Default[T0, T1, T2, T3, T4, T5, T6 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4), c5 <-chan T5, f5 func(T5), c6 <-chan T6, f6 func(T6), df func()) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	case v5 := <-c5:
		f5(v5)
	case v6 := <-c6:
		f6(v6)
	default:
		df()
	}
}
func RecvOK7[T0, T1, T2, T3, T4, T5, T6 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool), c5 <-chan T5, f5 func(T5, bool), c6 <-chan T6, f6 func(T6, bool)) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	case v5, ok := <-c5:
		f5(v5, ok)
	case v6, ok := <-c6:
		f6(v6, ok)
	}
}
func RecvOK7Default[T0, T1, T2, T3, T4, T5, T6 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool), c5 <-chan T5, f5 func(T5, bool), c6 <-chan T6, f6 func(T6, bool), df func()) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	case v5, ok := <-c5:
		f5(v5, ok)
	case v6, ok := <-c6:
		f6(v6, ok)
	default:
		df()
	}
}
func Send7[T0, T1, T2, T3, T4, T5, T6 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4, c5 chan<- T5, v5 T5, c6 chan<- T6, v6 T6) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	case c5 <- v5:
	case c6 <- v6:
	}
}
func Send7Default[T0, T1, T2, T3, T4, T5, T6 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4, c5 chan<- T5, v5 T5, c6 chan<- T6, v6 T6, df func()) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	case c5 <- v5:
	case c6 <- v6:
	default:
		df()
	}
}
func Select8[T0, T1, T2, T3, T4, T5, T6, T7 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4], p5 Param[T5], p6 Param[T6], p7 Param[T7]) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	case p6.
		SendChan <- p6.
		SendValue:
		return
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	case p5.
		SendChan <- p5.
		SendValue:
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
	case p6.
		SendChan <- p6.
		SendValue:
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
	case p7.
		SendChan <- p7.
		SendValue:
	case v7, ok := <-p7.
		RecvChan:
		p7.
			RecvFunc(v7, ok)
	}
}
func Select8Default[T0, T1, T2, T3, T4, T5, T6, T7 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4], p5 Param[T5], p6 Param[T6], p7 Param[T7], df func()) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	case p6.
		SendChan <- p6.
		SendValue:
		return
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	case p5.
		SendChan <- p5.
		SendValue:
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
	case p6.
		SendChan <- p6.
		SendValue:
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
	case p7.
		SendChan <- p7.
		SendValue:
	case v7, ok := <-p7.
		RecvChan:
		p7.
			RecvFunc(v7, ok)
	default:
		df()
	}
}
func Recv8[T0, T1, T2, T3, T4, T5, T6, T7 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4), c5 <-chan T5, f5 func(T5), c6 <-chan T6, f6 func(T6), c7 <-chan T7, f7 func(T7)) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	case v6 := <-c6:
		f6(v6)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	case v5 := <-c5:
		f5(v5)
	case v6 := <-c6:
		f6(v6)
	case v7 := <-c7:
		f7(v7)
	}
}
func Recv8Default[T0, T1, T2, T3, T4, T5, T6, T7 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4), c5 <-chan T5, f5 func(T5), c6 <-chan T6, f6 func(T6), c7 <-chan T7, f7 func(T7), df func()) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	case v6 := <-c6:
		f6(v6)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	case v5 := <-c5:
		f5(v5)
	case v6 := <-c6:
		f6(v6)
	case v7 := <-c7:
		f7(v7)
	default:
		df()
	}
}
func RecvOK8[T0, T1, T2, T3, T4, T5, T6, T7 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool), c5 <-chan T5, f5 func(T5, bool), c6 <-chan T6, f6 func(T6, bool), c7 <-chan T7, f7 func(T7, bool)) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	case v6, ok := <-c6:
		f6(v6, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	case v5, ok := <-c5:
		f5(v5, ok)
	case v6, ok := <-c6:
		f6(v6, ok)
	case v7, ok := <-c7:
		f7(v7, ok)
	}
}
func RecvOK8Default[T0, T1, T2, T3, T4, T5, T6, T7 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool), c5 <-chan T5, f5 func(T5, bool), c6 <-chan T6, f6 func(T6, bool), c7 <-chan T7, f7 func(T7, bool), df func()) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	case v6, ok := <-c6:
		f6(v6, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	case v5, ok := <-c5:
		f5(v5, ok)
	case v6, ok := <-c6:
		f6(v6, ok)
	case v7, ok := <-c7:
		f7(v7, ok)
	default:
		df()
	}
}
func Send8[T0, T1, T2, T3, T4, T5, T6, T7 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4, c5 chan<- T5, v5 T5, c6 chan<- T6, v6 T6, c7 chan<- T7, v7 T7) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	case c6 <- v6:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	case c5 <- v5:
	case c6 <- v6:
	case c7 <- v7:
	}
}
func Send8Default[T0, T1, T2, T3, T4, T5, T6, T7 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4, c5 chan<- T5, v5 T5, c6 chan<- T6, v6 T6, c7 chan<- T7, v7 T7, df func()) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	case c6 <- v6:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	case c5 <- v5:
	case c6 <- v6:
	case c7 <- v7:
	default:
		df()
	}
}
func Select9[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4], p5 Param[T5], p6 Param[T6], p7 Param[T7], p8 Param[T8]) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	case p6.
		SendChan <- p6.
		SendValue:
		return
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	case p6.
		SendChan <- p6.
		SendValue:
		return
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
		return
	case p7.
		SendChan <- p7.
		SendValue:
		return
	case v7, ok := <-p7.
		RecvChan:
		p7.
			RecvFunc(v7, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	case p5.
		SendChan <- p5.
		SendValue:
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
	case p6.
		SendChan <- p6.
		SendValue:
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
	case p7.
		SendChan <- p7.
		SendValue:
	case v7, ok := <-p7.
		RecvChan:
		p7.
			RecvFunc(v7, ok)
	case p8.
		SendChan <- p8.
		SendValue:
	case v8, ok := <-p8.
		RecvChan:
		p8.
			RecvFunc(v8, ok)
	}
}
func Select9Default[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](p0 Param[T0], p1 Param[T1], p2 Param[T2], p3 Param[T3], p4 Param[T4], p5 Param[T5], p6 Param[T6], p7 Param[T7], p8 Param[T8], df func()) {
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	case p6.
		SendChan <- p6.
		SendValue:
		return
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
		return
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
		return
	case p1.
		SendChan <- p1.
		SendValue:
		return
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
		return
	case p2.
		SendChan <- p2.
		SendValue:
		return
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
		return
	case p3.
		SendChan <- p3.
		SendValue:
		return
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
		return
	case p4.
		SendChan <- p4.
		SendValue:
		return
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
		return
	case p5.
		SendChan <- p5.
		SendValue:
		return
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
		return
	case p6.
		SendChan <- p6.
		SendValue:
		return
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
		return
	case p7.
		SendChan <- p7.
		SendValue:
		return
	case v7, ok := <-p7.
		RecvChan:
		p7.
			RecvFunc(v7, ok)
		return
	default:
	}
	select {
	case p0.
		SendChan <- p0.
		SendValue:
	case v0, ok := <-p0.
		RecvChan:
		p0.
			RecvFunc(v0, ok)
	case p1.
		SendChan <- p1.
		SendValue:
	case v1, ok := <-p1.
		RecvChan:
		p1.
			RecvFunc(v1, ok)
	case p2.
		SendChan <- p2.
		SendValue:
	case v2, ok := <-p2.
		RecvChan:
		p2.
			RecvFunc(v2, ok)
	case p3.
		SendChan <- p3.
		SendValue:
	case v3, ok := <-p3.
		RecvChan:
		p3.
			RecvFunc(v3, ok)
	case p4.
		SendChan <- p4.
		SendValue:
	case v4, ok := <-p4.
		RecvChan:
		p4.
			RecvFunc(v4, ok)
	case p5.
		SendChan <- p5.
		SendValue:
	case v5, ok := <-p5.
		RecvChan:
		p5.
			RecvFunc(v5, ok)
	case p6.
		SendChan <- p6.
		SendValue:
	case v6, ok := <-p6.
		RecvChan:
		p6.
			RecvFunc(v6, ok)
	case p7.
		SendChan <- p7.
		SendValue:
	case v7, ok := <-p7.
		RecvChan:
		p7.
			RecvFunc(v7, ok)
	case p8.
		SendChan <- p8.
		SendValue:
	case v8, ok := <-p8.
		RecvChan:
		p8.
			RecvFunc(v8, ok)
	default:
		df()
	}
}
func Recv9[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4), c5 <-chan T5, f5 func(T5), c6 <-chan T6, f6 func(T6), c7 <-chan T7, f7 func(T7), c8 <-chan T8, f8 func(T8)) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	case v6 := <-c6:
		f6(v6)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	case v6 := <-c6:
		f6(v6)
		return
	case v7 := <-c7:
		f7(v7)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	case v5 := <-c5:
		f5(v5)
	case v6 := <-c6:
		f6(v6)
	case v7 := <-c7:
		f7(v7)
	case v8 := <-c8:
		f8(v8)
	}
}
func Recv9Default[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](c0 <-chan T0, f0 func(T0), c1 <-chan T1, f1 func(T1), c2 <-chan T2, f2 func(T2), c3 <-chan T3, f3 func(T3), c4 <-chan T4, f4 func(T4), c5 <-chan T5, f5 func(T5), c6 <-chan T6, f6 func(T6), c7 <-chan T7, f7 func(T7), c8 <-chan T8, f8 func(T8), df func()) {
	select {
	case v0 := <-c0:
		f0(v0)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	case v6 := <-c6:
		f6(v6)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
		return
	case v1 := <-c1:
		f1(v1)
		return
	case v2 := <-c2:
		f2(v2)
		return
	case v3 := <-c3:
		f3(v3)
		return
	case v4 := <-c4:
		f4(v4)
		return
	case v5 := <-c5:
		f5(v5)
		return
	case v6 := <-c6:
		f6(v6)
		return
	case v7 := <-c7:
		f7(v7)
		return
	default:
	}
	select {
	case v0 := <-c0:
		f0(v0)
	case v1 := <-c1:
		f1(v1)
	case v2 := <-c2:
		f2(v2)
	case v3 := <-c3:
		f3(v3)
	case v4 := <-c4:
		f4(v4)
	case v5 := <-c5:
		f5(v5)
	case v6 := <-c6:
		f6(v6)
	case v7 := <-c7:
		f7(v7)
	case v8 := <-c8:
		f8(v8)
	default:
		df()
	}
}
func RecvOK9[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool), c5 <-chan T5, f5 func(T5, bool), c6 <-chan T6, f6 func(T6, bool), c7 <-chan T7, f7 func(T7, bool), c8 <-chan T8, f8 func(T8, bool)) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	case v6, ok := <-c6:
		f6(v6, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	case v6, ok := <-c6:
		f6(v6, ok)
		return
	case v7, ok := <-c7:
		f7(v7, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	case v5, ok := <-c5:
		f5(v5, ok)
	case v6, ok := <-c6:
		f6(v6, ok)
	case v7, ok := <-c7:
		f7(v7, ok)
	case v8, ok := <-c8:
		f8(v8, ok)
	}
}
func RecvOK9Default[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](c0 <-chan T0, f0 func(T0, bool), c1 <-chan T1, f1 func(T1, bool), c2 <-chan T2, f2 func(T2, bool), c3 <-chan T3, f3 func(T3, bool), c4 <-chan T4, f4 func(T4, bool), c5 <-chan T5, f5 func(T5, bool), c6 <-chan T6, f6 func(T6, bool), c7 <-chan T7, f7 func(T7, bool), c8 <-chan T8, f8 func(T8, bool), df func()) {
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	case v6, ok := <-c6:
		f6(v6, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
		return
	case v1, ok := <-c1:
		f1(v1, ok)
		return
	case v2, ok := <-c2:
		f2(v2, ok)
		return
	case v3, ok := <-c3:
		f3(v3, ok)
		return
	case v4, ok := <-c4:
		f4(v4, ok)
		return
	case v5, ok := <-c5:
		f5(v5, ok)
		return
	case v6, ok := <-c6:
		f6(v6, ok)
		return
	case v7, ok := <-c7:
		f7(v7, ok)
		return
	default:
	}
	select {
	case v0, ok := <-c0:
		f0(v0, ok)
	case v1, ok := <-c1:
		f1(v1, ok)
	case v2, ok := <-c2:
		f2(v2, ok)
	case v3, ok := <-c3:
		f3(v3, ok)
	case v4, ok := <-c4:
		f4(v4, ok)
	case v5, ok := <-c5:
		f5(v5, ok)
	case v6, ok := <-c6:
		f6(v6, ok)
	case v7, ok := <-c7:
		f7(v7, ok)
	case v8, ok := <-c8:
		f8(v8, ok)
	default:
		df()
	}
}
func Send9[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4, c5 chan<- T5, v5 T5, c6 chan<- T6, v6 T6, c7 chan<- T7, v7 T7, c8 chan<- T8, v8 T8) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	case c6 <- v6:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	case c6 <- v6:
		return
	case c7 <- v7:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	case c5 <- v5:
	case c6 <- v6:
	case c7 <- v7:
	case c8 <- v8:
	}
}
func Send9Default[T0, T1, T2, T3, T4, T5, T6, T7, T8 any](c0 chan<- T0, v0 T0, c1 chan<- T1, v1 T1, c2 chan<- T2, v2 T2, c3 chan<- T3, v3 T3, c4 chan<- T4, v4 T4, c5 chan<- T5, v5 T5, c6 chan<- T6, v6 T6, c7 chan<- T7, v7 T7, c8 chan<- T8, v8 T8, df func()) {
	select {
	case c0 <- v0:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	case c6 <- v6:
		return
	default:
	}
	select {
	case c0 <- v0:
		return
	case c1 <- v1:
		return
	case c2 <- v2:
		return
	case c3 <- v3:
		return
	case c4 <- v4:
		return
	case c5 <- v5:
		return
	case c6 <- v6:
		return
	case c7 <- v7:
		return
	default:
	}
	select {
	case c0 <- v0:
	case c1 <- v1:
	case c2 <- v2:
	case c3 <- v3:
	case c4 <- v4:
	case c5 <- v5:
	case c6 <- v6:
	case c7 <- v7:
	case c8 <- v8:
	default:
		df()
	}
}
